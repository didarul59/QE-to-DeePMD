{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"From Quantum Espresso to DeePMD-kit","text":"<p> I am sharing my personal experience of using DeePMD-kit with Quantum Espresso. As a beginner in atomistic modeling, I initially struggled with generating training data from Quantum Espresso outputs for use in DeePMD-kit. This tutorial is the result of those early challenges, and I am sharing it in the hope that it will help others who are just getting started. I am still learning, but I believe you may find this tutorial helpful if you are facing similar difficulties.  </p>"},{"location":"#step-1-quantum-espresso-installation","title":"Step 1: Quantum Espresso installation","text":"<p>I recommend the Tutorial by Pranab Das for installation guidance and other essential information. It\u2019s an excellent resource for anyone getting started with Quantum Espresso.</p>"},{"location":"#step-2-deepmd-kit-installation","title":"Step 2: DeePMD-kit installation","text":"<p>First Download the DeePMD file from the github using following command:</p> <pre><code>wget https://github.com/deepmodeling/deepmd-kit/releases/download/v3.1.0/deepmd-kit-3.1.0-cpu-Linux-x86_64.sh\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x deepmd-kit-3.1.0-cpu-Linux-x86_64.sh\n</code></pre> <p>Run it:</p> <pre><code>./deepmd-kit-3.1.0-cpu-Linux-x86_64.sh\n</code></pre> <p>You have to click \"Enter\" mupltiple times to review the license agreement.</p> <p>For location you will see somthing like this:</p> <pre><code>deepmd-kit will now be installed into this location:\n/home/didar/deepmd-kit\n\n- Press ENTER to confirm the location\n- Press CTRL-C to abort the installation\n- Or specify a different location below\n\n</code></pre> <p>After that it will ask for shell config:</p> <pre><code>conda config --set auto_activate_base false\n\nYou can undo this by running conda init --reverse $SHELL? [yes|no]\n[no] &gt;&gt;&gt; \n</code></pre> <p>Type \"Yes\" If you want ready to use in any terminal.</p> <p>If you type no (default) Conda won't auto-initialize. You\u2019ll need to run this manually in every new terminal before using conda:</p> <pre><code>source /home/didar/deepmd-kit/etc/profile.d/conda.sh\n</code></pre> <p>To Test the installation Run:</p> <pre><code>dp -h\n</code></pre>"},{"location":"dft_calculation/","title":"DFT Calculations","text":""},{"location":"dft_calculation/#step-1-run-md-in-quantum-espresso","title":"Step 1: Run MD in Quantum Espresso","text":"<ul> <li>Perform the Molecular Dynamics (MD) with enabling stress and force. It will produce relaxed atomic position at the specific given temperature.</li> </ul> <pre><code> &amp;control\n    calculation = 'md'\n    prefix='silicon',\n    etot_conv_thr =   1.2000000000d-04\n    forc_conv_thr =   1.0000000000d-04\n    pseudo_dir = '/home/didar/pseudopot/',\n    outdir='./'\n    tstress = .true.,\n    tprnfor = .true.,\n    nstep = 500 ,\n    dt = 20,              \n    verbosity = 'high'\n /\n &amp;system\n    ibrav = 0\n    nat   = 5\n    ntyp  = 2\n    ecutwfc=30,\n    ecutrho = 240,\n    nosym=.true.\n\n /\n &amp;electrons\n    conv_thr =  1.0d-7\n /\n&amp;IONS\n  ion_temperature = 'rescale-T',\n  tempw = 300,\n  nraise = 1,       ! Rescale every step\n  delta_t = 3.0\n/\n\nATOMIC_SPECIES\nC      15.99940  C.pbe-n-kjpaw_psl.1.0.0.UPF\nH       1.00794  H.pbe-kjpaw_psl.1.0.0.UPF\n\n\nCELL_PARAMETERS {angstrom}\n 11.461500   0.000000   0.000000\n  0.000000  11.613000   0.000000\n  0.000000   0.000000  11.581300\n\n\nATOMIC_POSITIONS {angstrom}\nC       5.730770   5.806480   5.790650\nH       6.284870   6.606080   6.287150\nH       6.414070   4.993080   5.537050\nH       4.952570   5.432980   6.459850\nH       5.271470   6.193880   4.878550\n</code></pre> <p>Run pw.x in self consistent mode. Remember you have to put MD over scf in the calculation.</p> <pre><code>pw.x &lt; pw.md.in &gt; pw.md.out\n# For parallel execution\nmpirun -np 4 pw.x -inp &lt; pw.md.in &gt; pw.md.out\n</code></pre> <p>Collect the Atomic Position from the last steps of the MD simulation. It will be the atomic positon for the VC-md calculation.</p> <pre><code>ATOMIC_POSITIONS (angstrom)\nC                5.7334773081        5.8024699213        5.7913607903\nH                6.2545090243        6.5830450255        6.3902672848\nH                6.4099327761        4.9586685623        5.4472273628\nH                4.8877026768        5.4750308881        6.4399882797\nH                5.3278614319        6.2729289691        4.8738344379\n</code></pre>"},{"location":"dft_calculation/#step-2-run-the-vc-md-calculation","title":"Step 2: Run the VC-MD Calculation","text":"<p>Remember you have to put the atomic positon of MD calculation to the input of the VC-MD or it will face convergence or thermal instability issues.</p> <pre><code> &amp;control\n    calculation = 'vc-md'\n    prefix='silicon',\n    etot_conv_thr =   1.2000000000d-04\n    forc_conv_thr =   1.0000000000d-04\n    pseudo_dir = '/home/didar/pseudopot/',\n    outdir='./'\n    tstress = .true.,\n    tprnfor = .true.,\n    nstep = 500 ,\n    dt = 20,                 \n    verbosity = 'high'\n /\n &amp;system\n    ibrav = 0\n    nat   = 5\n    ntyp  = 2\n    ecutwfc=30,\n    ecutrho = 240,\n    nosym=.true.\n\n /\n &amp;electrons\n    conv_thr =  1.0d-7\n /\n&amp;IONS\n  ion_temperature = 'rescale-T',\n  tempw = 300,\n  nraise = 1,       ! Rescale every step\n  delta_t = 3.0\n/\n&amp;CELL\n  cell_dynamics = 'pr',\n  press = 0.3,              ! Target external pressure (GPa)\n  press_conv_thr = 0.1,     ! Convergence threshold for pressuren\n  cell_dofree = 'all',      ! Relax volume and shape\n/\n\nATOMIC_SPECIES\nC      15.99940  C.pbe-n-kjpaw_psl.1.0.0.UPF\nH       1.00794  H.pbe-kjpaw_psl.1.0.0.UPF\n\n\nCELL_PARAMETERS {angstrom}\n 11.461500   0.000000   0.000000\n  0.000000  11.613000   0.000000\n  0.000000   0.000000  11.581300\n\nATOMIC_POSITIONS (angstrom)\nC                5.7334773081        5.8024699213        5.7913607903\nH                6.2545090243        6.5830450255        6.3902672848\nH                6.4099327761        4.9586685623        5.4472273628\nH                4.8877026768        5.4750308881        6.4399882797\nH                5.3278614319        6.2729289691        4.8738344379\n\n</code></pre> <p>Run pw.x in self consistent mode..</p> <pre><code>pw.x &lt; pw.vcmd.in &gt; opt.out\n# For parallel execution\nmpirun -np 4 pw.x -inp &lt; pw.vcmd.in &gt; opt.out\n</code></pre> <p>You have to name the vc-md output as opt.out if you want to use my data conversion code.</p>"},{"location":"introduction/","title":"From Quantum ESPRESSO to DeePMD-kit: A Workflow for Atomistic Modeling","text":"<p> Modern atomistic simulations often bridge first-principles accuracy with machine learning speed. This tutorial provides a complete workflow starting from Density Functional Theory (DFT) calculations using Quantum ESPRESSO, through training a deep neural network interatomic potential using DeePMD-kit, and finally to running large-scale Molecular Dynamics (MD) simulations with LAMMPS using the trained model.  We specifically focus on the example of CH\u2084, demonstrating:  - How to run DFT-based molecular dynamics (MD) and variable-cell MD (vc-MD) to sample high-quality atomic configurations. - How to extract structural, energetic, force, and stress data from Quantum ESPRESSO outputs. - How to convert that data into a format suitable for DeePMD-kit and train a robust potential. - How to validate and apply the trained model in LAMMPS for large-scale simulations.  All steps are technical and practical, with minimal theory. This guide provides step-by-step instructions to convert Quantum ESPRESSO output files for use in DeePMD-kit training. All steps are technical; no theoretical background provided. </p>"},{"location":"introduction/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Linux system with Quantum Espresso Installed init</li> <li>Python environment (recommended)</li> <li>DeePMD-kit installed</li> <li>DeePMD QE Conversion Tools  (or your own script)</li> </ul>"},{"location":"introduction/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Quantum ESPRESSO User Guide</li> <li>Quantum ESPRESSO Input Generator</li> <li>Tutorial by Pranab Das</li> </ul>"},{"location":"model_application/","title":"Model Application","text":"<p>Once the DP model is trained and compressed, you can use it to perform molecular dynamics (MD) simulations in LAMMPS.</p>"},{"location":"model_application/#step-1-navigate-to-lammps-folder","title":"Step 1: Navigate to LAMMPS Folder","text":"<p>Switch to the directory that contains your LAMMPS setup:</p> <pre><code>cd ../02.lmp\n</code></pre>"},{"location":"model_application/#step-2-link-the-dp-model","title":"Step 2: Link the DP Model","text":"<p>Create a symbolic link to the trained model file (graph-compress.pb) located in your training directory:</p> <pre><code>ln -s ../01.train/graph-compress.pb\n</code></pre> <p>After linking, you should see the following files:</p> <pre><code>ls\nconf.lmp  graph-compress.pb  in.lammps\n</code></pre>"},{"location":"model_application/#step-3-lammps-input-script","title":"Step 3: LAMMPS Input Script","text":"<p>Open in.lammps and note two key lines:</p> <pre><code>pair_style  deepmd graph-compress.pb\npair_coeff  * *\n</code></pre> <p>These lines tell LAMMPS to use the Deep Potential model (graph-compress.pb) to compute atomic interactions.</p>"},{"location":"model_application/#step-4-run-the-simulation","title":"Step 4: Run the Simulation","text":"<p>Execute LAMMPS as usual:</p> <pre><code>lmp -i in.lammps\n</code></pre> <p>After the run completes, you\u2019ll find:</p> <pre><code>    log.lammps: Thermodynamic information during the simulation\n\n    ch4.dump: Atomic trajectories\n\n</code></pre>"},{"location":"model_application/#summary","title":"Summary","text":"<p>By now, you have learned the basic workflow of using DeePMD-kit, which includes extracting training data from DFT calculations (such as those performed with Quantum ESPRESSO), converting that data into DeePMD-compatible format, training a deep potential model, freezing and compressing the trained model, running molecular dynamics simulations in LAMMPS using the DP model, and performing model inference through Python to analyze properties like energy from simulation trajectories.</p> <p>For further reading, documentation, updates, and advanced features, please refer to the official GitHub repository:</p> <ul> <li>DeePMD-kit GitHub</li> </ul>"},{"location":"training_data/","title":"Data Conversion: From Quantum ESPRESSO to DeePMD-kit","text":"<p> For DeePMD training, we need force data, atomic position, cell parameter data from the DFT calculations. These properties are essential for accurately capturing the potential energy surface. While you can manually extract this information from Quantum ESPRESSO output files. I have provided a Python-based script that parses the required data directly from QE outputs and converts them into the format needed for DeePMD-kit training. </p>"},{"location":"training_data/#step-1","title":"Step 1:","text":"<p>First, let's grab the ready-to-use data conversion toolkit. Open your terminal and run:</p> <pre><code>git clone https://github.com/didarul59/QE_to_DeePMD.git\n</code></pre> <p>This package includes everything you need \u2014 no manual edits required!</p> <p>Once the download is complete, simply copy your opt.out file (the Quantum ESPRESSO output) into the downloaded folder.</p> <p>The Qe_to_deepmd folder should have these files:</p> <pre><code>\u276f ls\nREADME.md  run.sh  script  opt.out\n\n</code></pre> <p>Now, make the script executable and run it:</p> <pre><code>chmod +x run.sh\n./run.sh\n</code></pre> <p>That's it! The script will automatically extract the atomic positions, forces, and cell parameters and prepare them in a DeePMD-compatible format. No hassle, just results! You now have data and training folder for deepmd kit. Remember you have to modify the input.json for your deep neural network.</p>"},{"location":"training_data/#step-2-training-process-based-on-deepmd-kit-documentation","title":"Step 2: Training Process (Based on DeePMD-kit documentation)","text":"<p>The following describes the training process of the Deep Potential (DP) model using DeePMD-kit.</p> <p>Go to the 01.train folder and start training by running:</p> <pre><code>dp train input.json\n</code></pre> <p>Upon starting, the terminal will display information about the data systems used:</p> <pre><code>DEEPMD INFO      ----------------------------------------------------------------------------------------------------\nDEEPMD INFO      ---Summary of DataSystem: training     -------------------------------------------------------------\nDEEPMD INFO      found 1 system(s):\nDEEPMD INFO                              system        natoms        bch_sz        n_bch          prob        pbc\nDEEPMD INFO           ../00.data/training_data/             5             7           22         1.000          T\nDEEPMD INFO      -----------------------------------------------------------------------------------------------------\nDEEPMD INFO      ---Summary of DataSystem: validation   --------------------------------------------------------------\nDEEPMD INFO      found 1 system(s):\nDEEPMD INFO                               system       natoms        bch_sz        n_bch          prob        pbc\nDEEPMD INFO          ../00.data/validation_data/            5             7            5         1.000          T\n</code></pre> <p>It will also show the learning rate settings:</p> <pre><code>DEEPMD INFO      start training at lr 1.00e-03 (== 1.00e-03), decay_step 5000, decay_rate 0.950006, final lr will be 3.51e-08\n</code></pre> <p>If training proceeds correctly, the screen prints progress every 1000 batches, for example:</p> <pre><code>DEEPMD INFO    batch    1000 training time 7.61 s, testing time 0.01 s\nDEEPMD INFO    batch    2000 training time 6.46 s, testing time 0.01 s\nDEEPMD INFO    batch    3000 training time 6.50 s, testing time 0.01 s\n...\nDEEPMD INFO   batch   10000 training time 6.41 s, testing time 0.01 s\nDEEPMD INFO    saved checkpoint model.ckpt\n</code></pre> <p>At the 10,000th batch, the model is saved as model.ckpt. Training and testing errors are also logged in lcurve.out. Checking Training Results</p> <p>After training, check the learning curve with:</p> <p>cat lcurve.out</p> <p>Example output:</p> <pre><code>#step       rmse_val       rmse_trn       rmse_e_val       rmse_e_trn       rmse_f_val       rmse_f_trn           lr\n      0     1.34e+01       1.47e+01         7.05e-01         7.05e-01         4.22e-01         4.65e-01     1.00e-03\n    ...\n 999000     1.24e-01       1.12e-01         5.93e-04         8.15e-04         1.22e-01         1.10e-01      3.7e-08\n1000000     1.31e-01       1.04e-01         3.52e-04         7.74e-04         1.29e-01         1.02e-01      3.5e-08\n</code></pre> <p>At the end of the training process, DeePMD-kit saves the model parameters in TensorFlow checkpoint files (e.g., <code>model.ckpt</code>). To use this model in simulations or inference tasks, you need to freeze it into a standalone <code>.pb</code> (protobuf) file.</p> <p>To do this, simply run the following command:</p> <pre><code>dp freeze -o graph.pb\n</code></pre> <p>DeePMD-kit allows you to compress the frozen model to significantly improve performance and reduce memory usage\u2014often by an order of magnitude. This is especially useful for running large-scale molecular dynamics simulations.</p> <p>To compress the model, use the following command:</p> <pre><code>dp compress -i graph.pb -o graph-compress.pb\n</code></pre> <p>Upon execution, the terminal will display messages like:</p> <pre><code>DEEPMD INFO    stage 1: compress the model\nDEEPMD INFO    built lr\nDEEPMD INFO    built network\nDEEPMD INFO    built training\nDEEPMD INFO    initialize model from scratch\nDEEPMD INFO    finished compressing\n\nDEEPMD INFO    stage 2: freeze the model\nDEEPMD INFO    Restoring parameters from model-compression/model.ckpt\nDEEPMD INFO    840 ops in the final graph\n</code></pre> <p>This process outputs a final compressed model file named graph-compress.pb.</p>"}]}